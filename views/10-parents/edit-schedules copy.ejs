<!DOCTYPE html>
<html>

<% var pageName = `授業予定：確認・編集` %>

<head>
	<% var opt = {
		pageName: pageName,
	}; %>
	<%- include(`${RoutesPath}/../views/_ejs/03-header/head-tag`, opt) %>
</head>

<body class="hold-transition sidebar-mini">
	<div class="wrapper">

		<!-- ヘッダー -->
		<% var opt = {
		}; %>
		<%- include(`${RoutesPath}/../views/_ejs/03-header/header`, opt) %>

		<!-- Main Sidebar Container -->
		<% var opt = {
			userName: session.name,
			activeId: "parents", 
		}; %>
		<%- include(`${RoutesPath}/../views/_ejs/03-header/sidebar`, opt) %>

		<!-- Content Wrapper. Contains page content -->
		<div class="content-wrapper" style="min-height: auto;">
			<!-- Content Header (Page header) -->
			<div class="content-header">
				<div class="container-fluid">
					<div class="row mb-2">
						<div class="col-sm-6">
							<h1 class="m-0"><%= pageName %></h1>
						</div><!-- /.col -->
						<div class="col-sm-6">
							<ol class="breadcrumb float-sm-right">
								<!-- <li class="breadcrumb-item"><a href="/admin/">ホーム</a></li> -->
								<li class="breadcrumb-item"><a href="/admin/<%= filepath %>/index/">保護者：一覧</a></li>
								<li class="breadcrumb-item active"><%= pageName %></li>
							</ol>
						</div><!-- /.col -->
					</div><!-- /.row -->
				</div><!-- /.container-fluid -->
			</div>
			<!-- /.content-header -->

			<!-- Main content -->
			<div class="content">
				<div class="container-fluid">
					<!-- <div class="row" style="width: max-content;"> -->
					<div class="row">
						<div class="card card-primary card-outline card-outline-tabs p-2">
							<div class="m-2 d-flex justify-content-center align-items-center">
								<button id="prev" class="btn btn-sm btn-outline-secondary" type="button">前の月</button>
								<div id="date-display0" class="mx-3" style="font-size: 24px;"></div>
								<button id="next" class="btn btn-sm btn-outline-secondary" type="button">次の月</button>
							</div>
							<div id="calendar"></div>
							<!-- /.card -->
						</div>
					</div>
					<!-- /.row -->
				</div>
				<!-- /.container-fluid -->
			</div>
			<!-- /.content -->
		</div>
		<!-- /.content-wrapper -->

		<!-- Main Footer -->
		<% var opt = {
		}; %>
		<%- include(`${RoutesPath}/../views/_ejs/03-header/footer`, opt) %>
	</div>
	<!-- ./wrapper -->

	<!-- 授業予定 のモーダル -->
	<div class="modal fade" id="modal-detail">
		<div class="modal-dialog modal-sm">
			<div class="modal-content">
				<div class="modal-header">
					<h4 class="modal-title">授業の予定</h4>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<div class="mb-2" id="date-display1" style="font-size: 16px;"></div>
					<div id="detail"></div>
					<div id="detail-btns" class="mt-3"></div>
				</div>
				<div class="modal-footer justify-content-between">
					<button type="button" class="btn btn-default" data-dismiss="modal">閉じる</button>
				</div>
			</div>
		</div>
	</div>

	<!-- 授業を予約する のモーダル -->
	<div class="modal fade" id="modal-add">
		<div class="modal-dialog modal-sm">
			<div class="modal-content">
				<div class="modal-header">
					<h4 class="modal-title">授業の予約</h4>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<form method="post" id="form-add" name="form0">
						<div class="mb-3">
							<label class="form-label">お子様のお名前</label>
							<select class="form-select" name="s_id">
								<% for( let e of students ) { %>
								<option value="<%= e.s_id %>"><%= e.s_first_name %> さん</option>
								<% } %>
							</select>
						</div>
						<div class="mb-3">
							<label class="form-label">授業開始時刻</label>
							<div class="row align-items-center g-3">
								<span class="col-auto" id="date-display2" style="font-size: 16px;"></span>
								<select class="form-select col" name="c_id" required>
									<!-- <option>開始時刻を選択してください</option> -->
								</select>
							</div>
						</div>
						<div>
							<button class="btn btn-success ms-3" type="button" onclick="clickAdd()">
								<i class="fa fa-lg fa-circle-check"></i> 予約する
							</button>
						</div>
					</form>
				</div>
				<div class="modal-footer justify-content-between">
					<button type="button" class="btn btn-default" data-dismiss="modal">キャンセル</button>
				</div>
			</div>
		</div>
	</div>

	<!-- 予定の確認 のモーダル -->
	<div class="modal fade" id="modal-cancel">
		<div class="modal-dialog modal-sm">
			<div class="modal-content">
				<div class="modal-header">
					<h4 class="modal-title">予定の確認・取り消し</h4>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<div class="mb-3">
						<label class="form-label">お子様のお名前</label>
						<span class="col-auto" id="cancel-student-name" style="font-size: 16px;"></span>
					</div>
					<div class="mb-3">
						<label class="form-label">授業開始時刻</label>
						<span class="col-auto" id="cancel-date" style="font-size: 16px;"></span>
					</div>
					<div>
						<form method="post" id="cancel-form">
							<input type="hidden" id="cancel-form-id" name="c_id">
							<div id="cancel-btns" class="mt-3"></div>
						</form>
					</div>
				</div>
				<div class="modal-footer justify-content-between">
					<button type="button" class="btn btn-default" data-dismiss="modal">キャンセル</button>
				</div>
			</div>
		</div>
	</div>

	<%- include(`${RoutesPath}/../views/_ejs/03-header/foot-tag`, opt) %>

	<script>
		var m300class = []
		var m400class_reserve = []
		moment.locale("ja");
		window.addEventListener("DOMContentLoaded", async () => {
			/* カレンダー初期 */
			console.log("0==================");
			var obj = {
				"year": year,
				"month": month,
			}
			m300class = await getClass(obj)
			m400class_reserve = await getClassReserve(obj)
			console.log("1==================");
			await showCalendar(year, month)
			console.log("2==================");
			await displaySchedule()
		});

		/* フォーム送信 */
		function clickAdd() {
			console.log("バリデーション 開始");
			if (!$('#form-add')[0].reportValidity()) return
			if (!window.confirm("授業を予約します。\nよろしいですか？")) return;

			var form = document.querySelectorAll("#form-add")[0];
			form.action = 'add';
			form.submit();
		}

		function clickCancel() {
			if (!window.confirm("予約を取り消します。\nよろしいですか？")) return;

			var form = document.querySelectorAll("#cancel-form")[0];
			form.action = 'cancel';
			form.submit();
		}
		// ===========================================================================================
		// カレンダー関連==============================================================================
		/* カレンダー基本設定 */
		const weeks = ['日', '月', '火', '水', '木', '金', '土']
		var today = new Date()
		var year = today.getFullYear();
		var month = today.getMonth() + 1;
		const config = {	//カレンダーの行・列の数
			row: 1,
			column: 1,
		}
		// var start_dateAry = [];

		/* 日程 表示 */
		async function displaySchedule() {
			for (var e of m400class_reserve) {
				e = e.start_date.split(" ")
				var date = e[0]
				var time = e[1]

				var t = document.querySelector(`[data-date="${date}"] > div`);
				if (!t) continue
				t.innerHTML += `<div class="_calendar-label">${time.substr(0, 5)}</div> `
			}

			setModal()
		}
		/* 授業コマ日程 取得 */
		async function getClass(obj) {
			var res = await fetch('./getClass', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(obj)
			}).then(res => {
				if (!res.ok) throw res
				if (res.redirected) throw location.href = res.url
				return res.json();
			}).catch(err => {
				throw err
			});
			return res
		}
		/* 予約した日程 取得 */
		async function getClassReserve(obj) {
			var res = await fetch('./getClassReserve', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(obj)
			}).then(res => {
				if (!res.ok) throw res
				if (res.redirected) throw location.href = res.url
				return res.json();
			}).catch(err => {
				throw err
			});
			return res
		}

		/* 一画面分のカレンダー生成 */
		function showCalendar(year, month) {
			for (i = 1; i <= config.row; i++) {
				var c = document.createElement("div")
				c.id = `c${i}`
				document.querySelector('#calendar').appendChild(c)

				for (j = 0; j < config.column; j++) {
					const calendarHtml = createCalendar(year, month)
					const sec = document.createElement('section')
					sec.innerHTML = calendarHtml
					document.querySelector(`#c${i}`).appendChild(sec)

					month++
					if (month > 12) {
						year++
						month = 1
					}
				}
			}
		}
		/* 1月分のカレンダー生成 */
		function createCalendar(year, month) {
			const startDate = new Date(year, month - 1, 1) // 月の最初の日を取得
			const endDate = new Date(year, month, 0) // 月の最後の日を取得
			const endDayCount = endDate.getDate() // 月の末日
			const lastMonthEndDate = new Date(year, month - 1, 0) // 前月の最後の日の情報
			const lastMonthendDayCount = lastMonthEndDate.getDate() // 前月の末日
			const startDay = startDate.getDay() // 月の最初の日の曜日を取得
			var dayCount = 1 // 日にちのカウント
			var calendarHtml = '' // HTMLを組み立てる変数

			document.querySelectorAll("#date-display0")[0].innerHTML = year + '/' + month

			calendarHtml += '<table class="_calendar00">'
			calendarHtml += '<thead><tr>'

			// 曜日の行を作成
			for (var i = 0; i < weeks.length; i++) {
				if (i == 0) {
					calendarHtml += '<th style="color: red">' + weeks[i] + '</th>'
				} else if (i == 6) {
					calendarHtml += '<th style="color: blue">' + weeks[i] + '</th>'
				} else {
					calendarHtml += '<th>' + weeks[i] + '</th>'
				}
			}
			calendarHtml += '</thead></tr>'
			calendarHtml += '<tbody>'

			var isEnd = false
			for (var w = 0; w < 6; w++) {
				calendarHtml += '<tr>'

				for (var d = 0; d < 7; d++) {
					var style = ""
					if (d % 7 == 0) {
						style += 'color: red;'
					} else if (d % 7 == 6) {
						style += 'color: blue;'
					}
					if (w == 0 && d < startDay) {
						// 1行目で1日の曜日の前
						var num = lastMonthendDayCount - startDay + d + 1
						calendarHtml += '<td class="is-disabled" style="background-color: #ddd">' + num + '</td>'
					} else if (dayCount > endDayCount) {
						// 末尾の日数を超えた
						isEnd = true
						var num = dayCount - endDayCount
						calendarHtml += '<td class="is-disabled" style="background-color: #ddd">' + num + '</td>'
						dayCount++
					} else {
						var nowDate = moment(new Date()).format("YYYY-MM-DD")
						var data_date = `${year}-${("0" + month).slice(-2)}-${("0" + dayCount).slice(-2)}`
						if (nowDate == data_date) style += 'border: 3px solid #f00;'

						/* 授業コマがあるかどうか */
						var existClass = m300class.some(e => e.start_date.split(" ")[0] == data_date);

						if (existClass) {
							calendarHtml += `<td class="calendar_td" data-toggle="modal" data-target="#modal-detail" data-date="${data_date}" style="background-color: #fff; cursor: pointer; ${style}">`
						} else {
							calendarHtml += `<td class="calendar_td" data-date="${data_date}" style="background-color: #eee; cursor: pointer; ${style}">`
						}
						calendarHtml += `<span> ${dayCount}</span>`
						calendarHtml += `<div class="mt-1"></div>`
						calendarHtml += `</td>`
						dayCount++
					}
				}
				calendarHtml += '</tr>'
				if (isEnd) break
			}
			calendarHtml += '</tbody></table>'

			return calendarHtml
		}
		/* カレンダー切り替え */
		async function moveCalendar(e) {
			for (i = 1; i <= config.row; i++) {
				document.querySelector(`#c${i}`).innerHTML = ''
			}
			if (e.target.id === 'prev') month--
			if (e.target.id === 'next') month++

			showCalendar(year, month)
			displaySchedule()
		}
		document.querySelector('#prev').addEventListener('click', moveCalendar)
		document.querySelector('#next').addEventListener('click', moveCalendar)

		/* ================================================================================= */
		/* モーダルの設定==================================================================== */
		var selectedDate = ""

		async function setModal() {
			var calendar_td = document.querySelectorAll('[data-target="#modal-detail"]')
			calendar_td.forEach(e => {
				e.addEventListener('click', () => {
					selectedDate = e.dataset.date;
					createDetail(selectedDate)
					createAddModal(selectedDate)
				})
			});
		}
		/* 日程詳細モーダル */
		function createDetail(d) {
			var reserve = m400class_reserve.filter(e => e.start_date.split(" ")[0] == d);

			var h = ""
			var display_date = moment(d, "YYYY-MM-DD").format('YYYY/MM/DD(ddd)')
			document.querySelectorAll("#date-display1")[0].innerHTML = display_date

			for (var e of reserve) {
				console.log(e);
				var start_date = moment(e.start_date, "YYYY-MM-DD HH:mm:ss").format('HH:mm')
				h += `
					<div class="text-primary mb-2" style="font-size: 16px;">
						<span class="bg-primary py-1 ps-1 m-1"></span>
						<span class="btn btn-outline-info" data-toggle="modal" data-target="#modal-cancel" data-c_id="${e.c_id}">
							${start_date + " ～ " + e.end_time?.substr(0, 5) + "　" + e.s_first_name + " さん"}
						</span>
					</div>`
			}
			document.querySelector('#detail').innerHTML = h;

			/* ボタン表示 */
			var nowDate = moment(new Date())
			var detailBtns = document.querySelectorAll('#detail-btns')[0]
			var html = ""
			html += `<button type="button" class="btn btn-info" data-toggle="modal" data-target="#modal-add">
					授業を予約する
				</button>`
			detailBtns.innerHTML = html

			/* 予定の確認・取り消し */
			var elm = document.querySelectorAll('[data-target="#modal-cancel"]')
			elm.forEach(e => {
				e.addEventListener('click', () => {
					var c_id = e.dataset.c_id;
					createCancelModal(selectedDate, c_id)
				})
			});
		}
		/* 授業予約モーダル */
		function createAddModal(d) {
			var display_date = moment(d, "YYYY-MM-DD").format('YYYY/MM/DD(ddd)')
			document.querySelectorAll("#date-display2")[0].innerHTML = display_date

			var date_select = document.querySelectorAll("select[name='c_id']")[0]
			var selected_s_id = document.querySelectorAll("select[name='s_id']")[0].value

			/* 生徒が予約済みかどうか */
			var isReserved = m400class_reserve.some(e => e.start_date.split(" ")[0] == d && e.s_id == selected_s_id);

			var weekday = moment(d).day()
			var jugyoTimeArr = m300class.filter(e => moment(e.start_date).format('YYYY-MM-DD') == d)

			var html = ""
			for (const e of jugyoTimeArr) {
				var start_time = moment(e.start_date).format('HH:mm')
				html += `<option value="${e.c_id}">${start_time}</option>`
			}
			date_select.style.backgroundColor = "#fff"

			date_select.innerHTML = html
		}
		document.querySelectorAll("select[name='s_id']")[0].addEventListener('change', () => {
			createAddModal(selectedDate)
		})
		/* 予約確認・取り消しモーダル */
		function createCancelModal(d, c_id) {
			var e = m400class_reserve.filter(e => e.c_id == c_id)[0];
			console.log(e);
			var display_date = moment(d, "YYYY-MM-DD").format('YYYY/MM/DD(ddd)')
			var start_time = moment(e.start_date, "YYYY-MM-DD HH:mm:ss").format('HH:mm')

			document.querySelectorAll("#cancel-date")[0].innerHTML = display_date + " " + start_time
			document.querySelectorAll("#cancel-student-name")[0].innerHTML = e.s_first_name + " さん"

			document.querySelectorAll("#cancel-form-id")[0].value = c_id

			/* ボタン表示 */
			var nowDate = moment(new Date())
			var cancelBtns = document.querySelectorAll('#cancel-btns')[0]
			var html = ""
			html += `
					<button class="btn btn-warning ms-3" type="button" onclick="clickCancel()">
						<i class="fa fa-lg fa-trash"></i> 予定を取り消す
					</button>`
			cancelBtns.innerHTML = html
		}
	</script>
</body>

</html>